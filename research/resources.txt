https://www.geeksforgeeks.org/node-js-fs-mkdirsync-method/
//https://stackoverflow.com/questions/35048686/whats-the-difference-between-path-resolve-and-path-join

https://nodejs.org/api/fs.html#fs_fs_mkdirsync_path_options

https://stackoverflow.com/questions/47458648/what-does-requirepath-means-in-webpack-config-js
path is Node.js native utility module.

https://nodejs.org/api/path.html

require is Node.js global function that allows you to extract contents from module.exports object inside some file.

Unlike regular NPM modules, you don't need to install it because it's already inside Node.js

In your example you use path.resolve method which creates proper string representing path to your file.

Straight from docs:

The path.resolve() method resolves a sequence of paths or path segments into an absolute path.

https://nodejs.org/api/path.html#path_path_resolve_paths

https://stackoverflow.com/questions/50818474/how-to-properly-test-if-the-type-of-the-result-is-a-javascript-function-in-jes

You can use toBe matcher to check whether result of typeof operator is function, please see example:

describe("", () => {
  it("test", () => {
    const somethingThatReturnsAFunction = () => () => {};
    const theResult = somethingThatReturnsAFunction();
    expect(typeof theResult).toBe("function");
  });
});


https://github.com/facebook/jest/issues/3457

test('name', () => {
  // array
  expect(Array.isArray(['value'])).toBe(true);
  // string
  expect(typeof 'value').toBe('string');
  // object
  expect({value: 'value'}).toBeTruthy();
  expect(typeof {value: 'value'}).toBe('object');
})


https://jestjs.io/docs/expect#tobevalue

const can = {
  name: 'pamplemousse',
  ounces: 12,
};

describe('the can', () => {
  test('has 12 ounces', () => {
    expect(can.ounces).toBe(12);
  });

  test('has a sophisticated name', () => {
    expect(can.name).toBe('pamplemousse');
  });
});


=====
path.resolve 
https://gist.github.com/FezVrasta/a29f3d8f6a715993a05ba1d24a241d3b
const fs = require('fs');
const path = require('path');

const MODULES_FOLDER = 'mymodules/';
const OUTPUT_DIR = './dist';

function getDirectories(srcpath) {
  return fs.readdirSync(srcpath)
    .filter(file =>
      fs.statSync(path.join(srcpath, file)).isDirectory()
    );
}


const modulesPath = path.resolve(__dirname, '../../${MODULES_FOLDER}');
const components = getDirectories(modulesPath).map(module => {
  return `import ${module} from '../${MODULES_FOLDER}/${module}'; export { ${module} };`;
});

let indexJs = '// Autogenerated!\n\n';

indexJs += components.join('\n');

if (!fs.existsSync(OUTPUT_DIR)){
  fs.mkdirSync(OUTPUT_DIR);
}

fs.writeFile(`${OUTPUT_DIR}/index.js`, indexJs, function(err) {
  if (err) {
    return console.error(err);
  }
});

=========
validate code - can use on office number and/or id
{
    message: "How old is your character?",
    name: "playerAge",
    type: "number",
    validate: (answer) => answer >= 7 && answer <= 90
  },


  https://medium.com/poka-techblog/simplify-your-javascript-use-map-reduce-and-filter-bd02c593cc2d
  ```Say we want two arrays now: one for rebel pilots, the other one for imperials. With .filter() it couldnâ€™t be easier!```